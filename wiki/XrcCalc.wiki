#summary A minimal xrcMixin example based on the Calc XRC tutorial.
#labels wxPython,XrcMixin,tutorial

= Introduction =

The [http://wiki.wxpython.org/UsingXmlResources original tutorial] gives plenty of background. This page examines the use of xrcMixin to try and make a lot of the original control and event declarations more implicit.


= Code =

==Files needed==
[http://ezwidgets.googlecode.com/svn/trunk/xrcmixin/xrcMixin.py xrcMixin.py]
[http://ezwidgets.googlecode.com/svn/trunk/calc/calc.xrc calc.xrc]
[http://ezwidgets.googlecode.com/svn/trunk/calc/calc_xrc.py calc_xrc.py]
[http://ezwidgets.googlecode.com/svn/trunk/calc/calc.py calc.py]

==calc.xrc==
This is the XRC file generated by xrced. As noted by Andrew Brown in the [http://wiki.wxpython.org/UsingXmlResources original tutorial], making the menubar a child of the mainframe removes the need for menubar explicit creation. This is how the xrc item tree should look like:

[http://ezwidgets.googlecode.com/svn/pics/calc_xrc.png]

The code for EVT_MENU event handling can be made implicit by checking EVT_MENU for each menu item in the code tab:

[http://ezwidgets.googlecode.com/svn/pics/menu_xrc.png]

For a menu item called `AddMenuItem`, this will create an EVT_MENU binding to the method `MainFrame.OnMenu_AddMenuItem()`. The code for this is all defined in [http://ezwidgets.googlecode.com/svn/trunk/calc/calc_xrc.py calc_xrc.py], a file that we need to generate by clicking _Generate Python..._ in the xrced _File_ menu.

Panels may either be defined as children of the main frame (logical choice for a single panel) or as top items if there is more than one, and explicit code is used to define which panel will be displayed. Also, the panel we will use as a child of the main frame will be _derived_ from the one defined in xrced, with added functionality from the xrcmixin class and added code for the control values handling (str to float conversion).

{{{
<?xml version="1.0" ?>
<resource>
  <object class="wxFrame" name="MainFrame">
    <title>Simple calculator</title>
    <centered>1</centered>
    <style/>
    <object class="wxMenuBar" name="MenuBar">
      <object class="wxMenu" name="OperationMeu">
        <label>Operations</label>
        <object class="wxMenuItem" name="AddMenuItem">
          <label>&amp;Add</label>
          <accel>Ctrl-A</accel>
          <help>Add second arg to the first arg.</help>
          <XRCED>
            <events>EVT_MENU</events>
          </XRCED>
        </object>
        <object class="wxMenuItem" name="SubtractMenuItem">
          <label>&amp;Subtract</label>
          <accel>Ctrl-S</accel>
          <help>Subtract second arg from the first arg.</help>
          <XRCED>
            <events>EVT_MENU</events>
          </XRCED>
        </object>
        <object class="separator"/>
        <object class="wxMenuItem" name="MultiplyMenuItem">
          <label>&amp;Multiply</label>
          <accel>Ctrl-M</accel>
          <help>Multiply first arg by second arg</help>
          <XRCED>
            <events>EVT_MENU</events>
          </XRCED>
        </object>
        <object class="wxMenuItem" name="DivideMenuItem">
          <label>&amp;Divide</label>
          <accel>Ctrl-D</accel>
          <help>Divide first arg by second arg.</help>
          <XRCED>
            <events>EVT_MENU</events>
          </XRCED>
        </object>
      </object>
    </object>
  </object>
  
  <object class="wxPanel" name="MainPanel">
      
    <object class="wxFlexGridSizer">
      <object class="sizeritem">
        <object class="wxStaticText">
          <label>First arg:</label>
        </object>
        <flag>wxALIGN_CENTRE_VERTICAL</flag>
      </object>
      <object class="sizeritem">
        <object class="wxTextCtrl" name="FirstArg"/>
        <flag>wxEXPAND</flag>
      </object>
      <object class="sizeritem">
        <object class="wxStaticText">
          <label>Second arg:</label>
        </object>
        <flag>wxALIGN_CENTRE_VERTICAL</flag>
      </object>
      <object class="sizeritem">
        <object class="wxTextCtrl" name="SecondArg"/>
        <flag>wxEXPAND</flag>
      </object>
      <object class="sizeritem">
        <object class="wxStaticText">
          <label>Result:</label>
        </object>
        <flag>wxALIGN_CENTRE_VERTICAL</flag>
      </object>
      <object class="sizeritem">
        <object class="wxTextCtrl" name="Result"/>
        <flag>wxEXPAND</flag>
      </object>
      <cols>2</cols>
      <rows>2</rows>
      <vgap>2</vgap>
      <hgap>2</hgap>
      <growablecols>1</growablecols>
      <growablerows></growablerows>
    </object>
  </object>
</resource>
}}}

==calc_xrc.py==

This is what the [http://ezwidgets.googlecode.com/svn/trunk/calc/calc_xrc.py calc_xrc.py] file looks like:
{{{
# This file was automatically generated by pywxrc.
# -*- coding: UTF-8 -*-

import wx
import wx.xrc as xrc

__res = None

def get_resources():
    """ This function provides access to the XML resources in this module."""
    global __res
    if __res == None:
        __init_resources()
    return __res




class xrcMainFrame(wx.Frame):
#!XRCED:begin-block:xrcMainFrame.PreCreate
    def PreCreate(self, pre):
        """ This function is called during the class's initialization.
        
        Override it for custom setup before the window is created usually to
        set additional window styles using SetWindowStyle() and SetExtraStyle().
        """
        pass
        
#!XRCED:end-block:xrcMainFrame.PreCreate

    def __init__(self, parent):
        # Two stage creation (see http://wiki.wxpython.org/index.cgi/TwoStageCreation)
        pre = wx.PreFrame()
        self.PreCreate(pre)
        get_resources().LoadOnFrame(pre, parent, "MainFrame")
        self.PostCreate(pre)

        # Define variables for the controls, bind event handlers

        self.Bind(wx.EVT_MENU, self.OnMenu_AddMenuItem, id=xrc.XRCID('AddMenuItem'))
        self.Bind(wx.EVT_MENU, self.OnMenu_SubtractMenuItem, id=xrc.XRCID('SubtractMenuItem'))
        self.Bind(wx.EVT_MENU, self.OnMenu_MultiplyMenuItem, id=xrc.XRCID('MultiplyMenuItem'))
        self.Bind(wx.EVT_MENU, self.OnMenu_DivideMenuItem, id=xrc.XRCID('DivideMenuItem'))

#!XRCED:begin-block:xrcMainFrame.OnMenu_AddMenuItem
    def OnMenu_AddMenuItem(self, evt):
        # Replace with event handler code
        print "OnMenu_AddMenuItem()"
#!XRCED:end-block:xrcMainFrame.OnMenu_AddMenuItem        

#!XRCED:begin-block:xrcMainFrame.OnMenu_SubtractMenuItem
    def OnMenu_SubtractMenuItem(self, evt):
        # Replace with event handler code
        print "OnMenu_SubtractMenuItem()"
#!XRCED:end-block:xrcMainFrame.OnMenu_SubtractMenuItem        

#!XRCED:begin-block:xrcMainFrame.OnMenu_MultiplyMenuItem
    def OnMenu_MultiplyMenuItem(self, evt):
        # Replace with event handler code
        print "OnMenu_MultiplyMenuItem()"
#!XRCED:end-block:xrcMainFrame.OnMenu_MultiplyMenuItem        

#!XRCED:begin-block:xrcMainFrame.OnMenu_DivideMenuItem
    def OnMenu_DivideMenuItem(self, evt):
        # Replace with event handler code
        print "OnMenu_DivideMenuItem()"
#!XRCED:end-block:xrcMainFrame.OnMenu_DivideMenuItem        


class xrcMainPanel(wx.Panel):
#!XRCED:begin-block:xrcMainPanel.PreCreate
    def PreCreate(self, pre):
        """ This function is called during the class's initialization.
        
        Override it for custom setup before the window is created usually to
        set additional window styles using SetWindowStyle() and SetExtraStyle().
        """
        pass
        
#!XRCED:end-block:xrcMainPanel.PreCreate

    def __init__(self, parent):
        # Two stage creation (see http://wiki.wxpython.org/index.cgi/TwoStageCreation)
        pre = wx.PrePanel()
        self.PreCreate(pre)
        get_resources().LoadOnPanel(pre, parent, "MainPanel")
        self.PostCreate(pre)

        # Define variables for the controls, bind event handlers





# ------------------------ Resource data ----------------------

def __init_resources():
    global __res
    __res = xrc.EmptyXmlResource()

    __res.Load('calc.xrc')
}}}

==calc.py==

The [http://ezwidgets.googlecode.com/svn/trunk/calc/calc.py calc.py] isn't much shorted than the original, but a lot of the control creation and event declaration is now defined implicitly when importing [http://ezwidgets.googlecode.com/svn/trunk/calc/calc_xrc.py calc_xrc.py]. As a proof of that, the wx.xrc module isn't needed any more in [http://ezwidgets.googlecode.com/svn/trunk/calc/calc.py calc.py]:

{{{
"""
Simple calculator that uses XRC.
"""

import wx
import calc_xrc
import xrcMixin

class MainPanel(calc_xrc.xrcMainPanel, xrcMixin.xrcMixin):
    def __init__(self, *args, **kwargs):
        calc_xrc.xrcMainPanel.__init__(self,*args, **kwargs)
        xrcMixin.xrcMixin.__init__(self)
        self.InitValues()

    def InitValues(self):
        self.FirstArg.SetValue("1")
        self.SecondArg.SetValue("2")
        self.Result.SetValue("")

    def InitArgs(self):
        try:
            self.first = float(self.FirstArg.GetValue())
        except ValueError:
            return self.BadFloatValue(self.FirstArg)
        try:
            self.second = float(self.SecondArg.GetValue())
        except ValueError:
            return self.BadFloatValue(self.SecondArg)
        return True

    def BadFloatValue(self, control):
        dlg = wx.MessageDialog(self, "I can't convert this to float.",
                              'Conversion error', wx.OK | wx.ICON_ERROR)
        dlg.ShowModal()
        dlg.Destroy()
        control.SetFocus()
        control.SetSelection(-1, -1)
        return False

class MainFrame(calc_xrc.xrcMainFrame):
    def __init__(self, *args, **kwargs):
        calc_xrc.xrcMainFrame.__init__(self,*args, **kwargs)
        self.panel = MainPanel(self)

        sizer = self.panel.GetSizer()
        sizer.Fit(self)
        sizer.SetSizeHints(self)

    def OnMenu_AddMenuItem(self, evt):
        if self.panel.InitArgs():
            self.panel.Result.SetValue(str(self.panel.first + self.panel.second))
    def OnMenu_SubtractMenuItem(self, evt):
        if self.panel.InitArgs():
            self.panel.Result.SetValue(str(self.panel.first - self.panel.second))
    def OnMenu_MultiplyMenuItem(self, evt):
        if self.panel.InitArgs():
            self.panel.Result.SetValue(str(self.panel.first * self.panel.second))
    def OnMenu_DivideMenuItem(self, evt):
        if self.panel.InitArgs():
            if self.panel.second != 0:
                self.panel.Result.SetValue(str(self.panel.first / self.panel.second))
            else:
                self.panel.Result.SetValue("#ERROR")

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MainFrame(None)
        self.frame.Show()
        return True

def main():
    app = MyApp(0)
    app.MainLoop()

if __name__ == '__main__':
    main()
}}}

Compared to the [http://wiki.wxpython.org/UsingXmlResources original tutorial], the code is re-shuffled a little:
  * Menu handling is now part of the main frame. This makes the menubar creation implicit.
  * the use of [http://ezwidgets.googlecode.com/svn/trunk/xrcmixin/xrcMixin.py xrcMixin.py] automates the control definition (`Panel.FirstArg`, `Panel.SecondArg`, `Panel.Result`).
  * Control initialisation and value handling is now part of the main panel.
  * All the other program logic is identical to the original.

=Conclusion=

This page has hopefully demonstrated how to automate a lot of the event and control declaration in wxpython/xrc applications built with xrced.

The main concepts revolve around:
  * generating the python code from xrced
  * using [http://ezwidgets.googlecode.com/svn/trunk/xrcmixin/xrcMixin.py xrcMixin.py], an xrc mixin for automatically linking controls and parent panels
  * defining a main frame and menubar in xrc to hide the menu event handling. Then, only the methods linked to each menu event need overwriting.

Any comments welcome!
